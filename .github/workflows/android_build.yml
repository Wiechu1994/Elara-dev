name: Build ElaraLite APK

on:
  push:
    branches:
      - main # Zmień na nazwę Twojej głównej gałęzi, jeśli jest inna

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          # Dodajemy cache dla Gradle, jeśli Twoj projekt go używa, przyspieszy to kolejne buildy
          cache: gradle

      - name: Install system dependencies
        run: |
          set -e
          echo "DEBUG: Starting system dependencies installation"
          sudo apt-get update -qq
          echo "DEBUG: apt-get update finished"
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            ccache \
            git \
            unzip \
            zip \
            libncurses5 \
            libstdc++6 \
            libffi-dev \
            libssl-dev \
            liblzma-dev \
            libgl1-mesa-dev \
            curl \
            # Dodano lib32z1 i libbz2-1.0:i386 często wymagane przez Android SDK na Ubuntu 64-bit
            lib32z1 \
            libbz2-1.0:i386 \
            libc6:i386 \
            libncurses5:i386 \
            libstdc++6:i386
          echo "DEBUG: apt-get install finished"
          echo "DEBUG: Verifying curl installation by checking version:"
          curl --version
          echo "DEBUG: End of system dependencies install script"

      - name: Install Android SDK and Build Tools
        run: |
          set -e
          echo "DEBUG: Starting Android SDK and Build Tools installation"
          mkdir -p $HOME/android-sdk/cmdline-tools
          cd $HOME/android-sdk/cmdline-tools
          echo "DEBUG: Downloading Android SDK tools..."
          # Zapewnienie, że URL jest poprawny i zawsze najnowszy dla command-line tools
          curl --verbose --fail -Lo sdk-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip
          echo "DEBUG: Download command finished. Unzipping..."
          unzip -q sdk-tools.zip -d tmp
          mkdir -p latest
          mv tmp/* latest/
          rm -rf tmp sdk-tools.zip
          echo "DEBUG: Android SDK tools installed in $HOME/android-sdk/cmdline-tools/latest"

          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH

          echo "DEBUG: Accepting Android SDK licenses..."
          yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk --licenses > /dev/null
          
          echo "DEBUG: Installing SDK components (platform-tools, platforms, build-tools)..."
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk "platform-tools" "platforms;android-33" "build-tools;33.0.2" > /dev/null
          
          # Dodany krok do listowania zainstalowanych komponentów SDK (dla debugowania)
          echo "DEBUG: Listing installed Android SDK components:"
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --list --sdk_root=$HOME/android-sdk
          echo "DEBUG: Android SDK setup complete."

      - name: Install Python dependencies for Buildozer
        run: |
          set -e
          echo "DEBUG: Installing Python dependencies for Buildozer"
          python -m pip install --upgrade pip
          # Jeśli masz konkretną wersję buildozera, która działa, użyj jej, np. buildozer==1.2.0
          pip install cython==0.29.36 virtualenv buildozer
          echo "DEBUG: Buildozer dependencies installed."

      - name: Build APK with Buildozer
        run: |
          set -e
          echo "DEBUG: Starting Buildozer APK build"
          # Upewnij się, że plik buildozer.spec istnieje i jest poprawny w głównym katalogu
          yes | buildozer android debug
          echo "DEBUG: Buildozer APK build finished."

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ElaraLite-APK
          path: bin/*.apk
